name: Build and Deploy Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      image_tag:
        description: 'Docker image tag (leave empty for auto-generated)'
        required: false
        default: ''
        type: string
      skip_build:
        description: 'Skip Docker build (use existing image)'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths: ['src/**']
  pull_request:
    branches: [main]
    paths: ['src/**']

env:
  AWS_REGION: ap-south-1
  TF_VAR_aws_region: ap-south-1

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:

  static-analysis:
    name: Lint • Scan • Docs
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          tflint --init
          tflint --recursive --format stylish

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          quiet: true
          soft_fail: false
          output_format: github_failed_only

      - name: Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: terraform
          output-file: README.md
          output-method: inject
          git-push: false
          fail-on-diff: false

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    needs: [static-analysis]
    if: github.event.inputs.skip_build != 'true' || github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unique image tag
        id: generate-tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          else
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            SHORT_SHA=${GITHUB_SHA:0:7}
            IMAGE_TAG="v1.6.0-${TIMESTAMP}-${SHORT_SHA}"
          fi
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR URI
        id: get-ecr-uri
        run: |
          REPO_NAME="hello-world-lambda-${{ github.event.inputs.environment || 'dev' }}"
          if aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            ECR_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text)
            echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          else
            echo "ECR repository $REPO_NAME does not exist."
            exit 1
          fi

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.get-ecr-uri.outputs.ecr_uri }}
          tags: |
            type=raw,value=${{ steps.generate-tag.outputs.image_tag }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false
          no-cache: true

    outputs:
      image_uri: ${{ steps.get-ecr-uri.outputs.ecr_uri }}:${{ steps.generate-tag.outputs.image_tag }}
      image_tag: ${{ steps.generate-tag.outputs.image_tag }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    needs: [static-analysis, build-and-push]
    if: always() && (needs.build-and-push.result == 'success' || github.event.inputs.skip_build == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="image_tag=${{ needs.build-and-push.outputs.image_tag || github.event.inputs.image_tag || 'latest' }}" \
            -out=tfplan
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

      - name: Capture plan text
        if: github.event_name == 'pull_request'
        id: show-plan
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform show -no-color tfplan > plan.txt
          echo "plan<<EOF" >> $GITHUB_OUTPUT
          sed -e '1,400p' plan.txt | sed 's/^/    /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform apply -auto-approve tfplan

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_TEXT: ${{ steps.show-plan.outputs.plan }}
          DEPLOY_ENV: ${{ github.event.inputs.environment || 'dev' }}
        with:
          script: |
            const plan = process.env.PLAN_TEXT || '_no changes_';
            const summary = plan.includes('No changes') ? 'No infrastructure changes.' : 'Changes detected.';
            const environment = process.env.DEPLOY_ENV;

            const body = `
            ### Terraform Plan – **${environment}**

            ${summary}

            <details><summary>Show full plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`

            </details>
            `;

                  github.rest.issues.createComment({
                    ...context.repo,
                    issue_number: context.issue.number,
                    body
                  });


    outputs:
      image_tag: ${{ needs.build-and-push.outputs.image_tag }}
