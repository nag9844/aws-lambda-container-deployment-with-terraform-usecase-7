name: 'Build and Deploy Application'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'app/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod


env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

jobs:
  build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role # Replace with your actual IAM role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ECR_REPOSITORY_URI }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image details
        run: |
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  update-lambda:
    name: 'Update Lambda Functions'
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role # Replace with your actual IAM role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Lambda function
        run: |
          FUNCTION_NAME="hello-world-lambda-${{ matrix.environment }}-hello-world"
          IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}:latest"
          
          echo "Updating Lambda function: $FUNCTION_NAME"
          echo "With image: $IMAGE_URI"
          
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region ${{ env.AWS_REGION }}
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name $FUNCTION_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "Lambda function updated successfully!"

  test-deployment:
    name: 'Test Deployment'
    runs-on: ubuntu-latest
    needs: update-lambda
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role # Replace with your actual IAM role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Test Lambda function
        run: |
          FUNCTION_NAME="hello-world-lambda-${{ matrix.environment }}-hello-world"
          
          echo "Testing Lambda function: $FUNCTION_NAME"
          
          RESPONSE=$(aws lambda invoke \
            --function-name $FUNCTION_NAME \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json)
          
          echo "Lambda Response:"
          cat response.json
          
          # Check if the response contains expected content
          if grep -q "Hello World" response.json; then
            echo " Lambda function test passed!"
          else
            echo " Lambda function test failed!"
            exit 1
          fi

      - name: Get API Gateway URL
        run: |
          API_NAME="hello-world-lambda-${{ matrix.environment }}-api"
          
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='$API_NAME'].id" \
            --output text)
          
          if [ ! -z "$API_ID" ] && [ "$API_ID" != "None" ]; then
            API_URL="https://${API_ID}.execute-api.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.environment }}"
            echo "API Gateway URL for ${{ matrix.environment }}: $API_URL"
            
            # Test the API endpoint
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo " API Gateway test passed!"
            else
              echo " API Gateway test failed with status: $HTTP_STATUS"
            fi
          else
            echo "  API Gateway not found for environment: ${{ matrix.environment }}"
          fi