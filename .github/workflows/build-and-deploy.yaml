name: 'Build and Deploy Application'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'lambda/**'
      - 'Dockerfile'
      - 'package.json'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1

jobs:
  test:
    name: 'Test Application'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build

  determine-environment:
    name: 'Determine Target Environment'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    
    steps:
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

  check-prerequisites:
    name: 'Check Prerequisites - ${{ needs.determine-environment.outputs.environment }}'
    runs-on: ubuntu-latest
    needs: [test, determine-environment]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check ECR repository exists
      env:
        ECR_REPOSITORY: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
      run: |
        echo "🔍 Checking ECR repository: $ECR_REPOSITORY"
        
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "❌ ECR repository $ECR_REPOSITORY does not exist!"
          echo "Please run the 'Setup ECR Repository' workflow first."
          exit 1
        fi
        
        echo "✅ ECR repository verified"
    
    - name: Check Lambda function exists
      env:
        FUNCTION_NAME: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
      run: |
        echo "🔍 Checking Lambda function: $FUNCTION_NAME"
        
        if ! aws lambda get-function --function-name $FUNCTION_NAME --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "❌ Lambda function $FUNCTION_NAME does not exist!"
          echo "Please run the 'Deploy Infrastructure' workflow first."
          exit 1
        fi
        
        echo "✅ Lambda function verified"

  build-and-deploy:
    name: 'Build and Deploy - ${{ needs.determine-environment.outputs.environment }}'
    runs-on: ubuntu-latest
    needs: [test, determine-environment, check-prerequisites]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      run: |
        echo "🏗️ Building Docker image for environment: $ENVIRONMENT"
        
        # Build image with build args
        docker build \
          --build-arg NODE_ENV=production \
          --build-arg ENVIRONMENT=$ENVIRONMENT \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Tag with latest and environment
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT
        
        echo "📤 Pushing images to ECR"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT
        
        echo "✅ Images pushed successfully"
        echo "📋 Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Update Lambda function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
        IMAGE_TAG: ${{ github.sha }}
        FUNCTION_NAME: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      run: |
        echo "🚀 Updating Lambda function: $FUNCTION_NAME"
        
        # Update function code
        aws lambda update-function-code \
          --function-name $FUNCTION_NAME \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --region ${{ env.AWS_REGION }}
        
        echo "⏳ Waiting for function to be updated..."
        aws lambda wait function-updated \
          --function-name $FUNCTION_NAME \
          --region ${{ env.AWS_REGION }}
        
        # Update environment variables if needed
        aws lambda update-function-configuration \
          --function-name $FUNCTION_NAME \
          --environment Variables="{ENVIRONMENT=$ENVIRONMENT,NODE_ENV=production,DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ),COMMIT_SHA=${{ github.sha }}}" \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Lambda function $FUNCTION_NAME updated successfully"
    
    - name: Test deployment
      env:
        FUNCTION_NAME: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
      run: |
        echo "🧪 Testing Lambda function deployment"
        
        # Invoke function to test
        RESPONSE=$(aws lambda invoke \
          --function-name $FUNCTION_NAME \
          --region ${{ env.AWS_REGION }} \
          --payload '{}' \
          response.json)
        
        echo "📋 Lambda response:"
        cat response.json
        
        # Check if invocation was successful
        if echo "$RESPONSE" | grep -q '"StatusCode": 200'; then
          echo "✅ Lambda function test successful"
        else
          echo "❌ Lambda function test failed"
          exit 1
        fi
    
    - name: Get API Gateway URL
      env:
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      run: |
        echo "🔍 Getting API Gateway URL for environment: $ENVIRONMENT"
        
        # Get API Gateway URL from AWS
        API_ID=$(aws apigatewayv2 get-apis \
          --query "Items[?Name=='hello-world-lambda-$ENVIRONMENT-api'].ApiId" \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        if [[ -n "$API_ID" && "$API_ID" != "None" ]]; then
          API_URL="https://$API_ID.execute-api.${{ env.AWS_REGION }}.amazonaws.com"
          echo "📋 API Gateway URL: $API_URL"
          
          # Test API Gateway endpoint
          echo "🧪 Testing API Gateway endpoint..."
          if curl -f -s "$API_URL" > /dev/null; then
            echo "✅ API Gateway endpoint is accessible"
          else
            echo "⚠️ API Gateway endpoint test failed (this might be normal if CORS is configured)"
          fi
        else
          echo "⚠️ API Gateway not found for environment: $ENVIRONMENT"
        fi
    
    - name: Deployment Summary
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
        IMAGE_TAG: ${{ github.sha }}
        FUNCTION_NAME: hello-world-lambda-${{ needs.determine-environment.outputs.environment }}-app
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      run: |
        echo "## Deployment Complete 🚀" >> $GITHUB_STEP_SUMMARY
        echo "### Environment: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "- **Lambda Function**: \`$FUNCTION_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: \`$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Time**: \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Application deployed successfully!**" >> $GITHUB_STEP_SUMMARY