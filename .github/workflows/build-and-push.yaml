name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'

env:
  AWS_REGION: ap-south-1

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR Repository URI
        id: get-ecr-uri
        run: |
          # Get ECR repository URI from AWS
          REPO_NAME="hello-world-lambda-${{ github.event.inputs.environment || 'dev' }}"
          ECR_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text)
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "ECR Repository URI: $ECR_URI"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.get-ecr-uri.outputs.ecr_uri }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image vulnerability scan
        if: github.event_name != 'pull_request'
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan the image
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ steps.get-ecr-uri.outputs.ecr_uri }}:${{ github.event.inputs.image_tag || 'latest' }}

      - name: Convert Lambda to Container Mode
        if: github.event_name != 'pull_request'
        run: |
          FUNCTION_NAME="hello-world-lambda-${{ github.event.inputs.environment || 'dev' }}"
          IMAGE_URI="${{ steps.get-ecr-uri.outputs.ecr_uri }}:${{ github.event.inputs.image_tag || 'latest' }}"
          
          echo "Converting Lambda function: $FUNCTION_NAME to container mode"
          echo "Using image: $IMAGE_URI"
          
          # Check current function configuration
          CURRENT_PACKAGE_TYPE=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.PackageType' --output text)
          echo "Current package type: $CURRENT_PACKAGE_TYPE"
          
          if [ "$CURRENT_PACKAGE_TYPE" = "Zip" ]; then
            echo "Function is currently ZIP-based, recreating as container-based..."
            
            # Get current function configuration
            CURRENT_CONFIG=$(aws lambda get-function-configuration --function-name $FUNCTION_NAME)
            ROLE_ARN=$(echo $CURRENT_CONFIG | jq -r '.Role')
            TIMEOUT=$(echo $CURRENT_CONFIG | jq -r '.Timeout')
            MEMORY_SIZE=$(echo $CURRENT_CONFIG | jq -r '.MemorySize')
            
            # Extract environment variables properly
            ENV_VARS=$(echo $CURRENT_CONFIG | jq -c '.Environment.Variables // {}')
            
            echo "Backing up current function configuration..."
            echo "Role: $ROLE_ARN"
            echo "Timeout: $TIMEOUT"
            echo "Memory: $MEMORY_SIZE"
            echo "Environment Variables: $ENV_VARS"
            
            # Delete the existing function
            echo "Deleting existing ZIP-based function..."
            aws lambda delete-function --function-name $FUNCTION_NAME --region ${{ env.AWS_REGION }}
            
            # Wait a moment for deletion to complete
            sleep 15
            
            # Create new container-based function with proper environment variables
            echo "Creating new container-based function..."
            if [ "$ENV_VARS" = "{}" ]; then
              # No environment variables
              aws lambda create-function \
                --function-name $FUNCTION_NAME \
                --role $ROLE_ARN \
                --code ImageUri=$IMAGE_URI \
                --package-type Image \
                --timeout $TIMEOUT \
                --memory-size $MEMORY_SIZE \
                --region ${{ env.AWS_REGION }}
            else
              # With environment variables
              aws lambda create-function \
                --function-name $FUNCTION_NAME \
                --role $ROLE_ARN \
                --code ImageUri=$IMAGE_URI \
                --package-type Image \
                --timeout $TIMEOUT \
                --memory-size $MEMORY_SIZE \
                --environment "Variables=$ENV_VARS" \
                --region ${{ env.AWS_REGION }}
            fi
            
            # Wait for function to be active
            echo "Waiting for function to become active..."
            aws lambda wait function-active \
              --function-name $FUNCTION_NAME \
              --region ${{ env.AWS_REGION }}
              
          else
            echo "Function is already container-based, updating image..."
            # Function is already using Image package type, just update the code
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --image-uri $IMAGE_URI \
              --region ${{ env.AWS_REGION }}
            
            # Wait for the update to complete
            echo "Waiting for function update to complete..."
            aws lambda wait function-updated \
              --function-name $FUNCTION_NAME \
              --region ${{ env.AWS_REGION }}
          fi
          
          echo "Lambda function conversion completed successfully"
          
          # Verify the final state
          FINAL_PACKAGE_TYPE=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.PackageType' --output text)
          FINAL_IMAGE_URI=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Code.ImageUri' --output text)
          echo "Final package type: $FINAL_PACKAGE_TYPE"
          echo "Final image URI: $FINAL_IMAGE_URI"

    outputs:
      image_uri: ${{ steps.get-ecr-uri.outputs.ecr_uri }}:${{ github.event.inputs.image_tag || 'latest' }}