name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  AWS_REGION: ap-south-1
  TF_VAR_aws_region: ap-south-1

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.6.0

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive terraform/
          
      - name: Terraform Validate - All Modules
        run: |
          for module in terraform/modules/*/; do
            echo "Validating $module"
            cd $module
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.6.0
        #   terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

      - name: Save Plan Output
        if: github.event_name == 'pull_request'
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform show -no-color tfplan > plan_output.txt

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './terraform/environments/${{ github.event.inputs.environment || 'dev' }}/plan_output.txt';
            const plan = fs.readFileSync(path, 'utf8');
            
            const comment = `
            ## Terraform Plan - ${{ github.event.inputs.environment || 'dev' }} Environment
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`hcl
            ${plan}
            \`\`\`
            
            </details>
            
            **Plan Status**: ${{ steps.plan.outputs.plan_exitcode == '2' && 'Changes Detected' || 'No Changes' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deploy Infrastructure with ZIP-based Lambda
  deploy-infrastructure:
    name: Deploy Infrastructure (ZIP)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.6.0
        #   terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform apply -auto-approve

      - name: Get Outputs
        id: outputs
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn 2>/dev/null || echo "")
          LAMBDA_NAME=$(terraform output -raw lambda_function_name 2>/dev/null || echo "")
          LAMBDA_URL=$(terraform output -raw lambda_function_url 2>/dev/null || echo "")
          DEPLOYMENT_TYPE=$(terraform output -raw deployment_type 2>/dev/null || echo "zip")
          PACKAGE_TYPE=$(terraform output -raw package_type 2>/dev/null || echo "Zip")
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "lambda_url=$LAMBDA_URL" >> $GITHUB_OUTPUT
          echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
          echo "package_type=$PACKAGE_TYPE" >> $GITHUB_OUTPUT

      - name: Test ZIP Deployment
        if: steps.outputs.outputs.api_url != ''
        run: |
          echo "🧪 Testing ZIP-based Lambda deployment..."
          echo "🌐 API Gateway URL: ${{ steps.outputs.outputs.api_url }}"
          echo "🔗 Lambda Function URL: ${{ steps.outputs.outputs.lambda_url }}"
          echo "📦 Deployment Type: ${{ steps.outputs.outputs.deployment_type }}"
          echo "📋 Package Type: ${{ steps.outputs.outputs.package_type }}"
          
          # Wait for API Gateway to be ready
          sleep 15
          
          # Test API Gateway endpoint
          echo "🔍 Testing API Gateway endpoint..."
          API_RESPONSE=$(curl -s -w "\n%{http_code}" "${{ steps.outputs.outputs.api_url }}")
          API_HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
          API_BODY=$(echo "$API_RESPONSE" | head -n -1)
          
          echo "📊 API Gateway HTTP Status: $API_HTTP_CODE"
          
          if [ "$API_HTTP_CODE" = "200" ]; then
            echo "✅ API Gateway test successful!"
            echo "📄 Response: $API_BODY"
          else
            echo "⚠️ API Gateway test returned HTTP $API_HTTP_CODE"
          fi
          
          # Test Lambda Function URL if available
          if [ -n "${{ steps.outputs.outputs.lambda_url }}" ]; then
            echo "🔍 Testing Lambda Function URL..."
            LAMBDA_RESPONSE=$(curl -s -w "\n%{http_code}" "${{ steps.outputs.outputs.lambda_url }}")
            LAMBDA_HTTP_CODE=$(echo "$LAMBDA_RESPONSE" | tail -n1)
            LAMBDA_BODY=$(echo "$LAMBDA_RESPONSE" | head -n -1)
            
            echo "📊 Lambda Function URL HTTP Status: $LAMBDA_HTTP_CODE"
            
            if [ "$LAMBDA_HTTP_CODE" = "200" ]; then
              echo "✅ Lambda Function URL test successful!"
              echo "📄 Response: $LAMBDA_BODY"
            else
              echo "⚠️ Lambda Function URL test returned HTTP $LAMBDA_HTTP_CODE"
            fi
          fi
          
          echo ""
          echo "🎉 ZIP deployment completed successfully!"
          echo "🌐 Your function is live at:"
          echo "   - API Gateway: ${{ steps.outputs.outputs.api_url }}"
          if [ -n "${{ steps.outputs.outputs.lambda_url }}" ]; then
            echo "   - Function URL: ${{ steps.outputs.outputs.lambda_url }}"
          fi

    outputs:
      api_url: ${{ steps.outputs.outputs.api_url }}
      lambda_arn: ${{ steps.outputs.outputs.lambda_arn }}
      lambda_name: ${{ steps.outputs.outputs.lambda_name }}
      lambda_url: ${{ steps.outputs.outputs.lambda_url }}
      deployment_type: ${{ steps.outputs.outputs.deployment_type }}
      package_type: ${{ steps.outputs.outputs.package_type }}

  # Manual apply job for workflow dispatch
  terraform-apply-manual:
    name: Terraform Apply (Manual)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.action == 'apply'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.6.0
        #   terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform apply -auto-approve

      - name: Get Outputs
        id: outputs
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn 2>/dev/null || echo "")
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT

      - name: Test Deployment
        if: steps.outputs.outputs.api_url != ''
        run: |
          echo "Testing API Gateway endpoint..."
          curl -f "${{ steps.outputs.outputs.api_url }}" || exit 1
          echo "Deployment test successful!"

    outputs:
      api_url: ${{ steps.outputs.outputs.api_url }}
      lambda_arn: ${{ steps.outputs.outputs.lambda_arn }}

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.action == 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform destroy -auto-approve