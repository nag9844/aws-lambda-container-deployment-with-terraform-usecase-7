name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  AWS_REGION: ap-south-1
  TF_VAR_aws_region: ap-south-1

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive terraform/
          
      - name: Terraform Validate - All Modules
        run: |
          for module in terraform/modules/*/; do
            echo "Validating $module"
            cd $module
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

      - name: Save Plan Output
        if: github.event_name == 'pull_request'
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          terraform show -no-color tfplan > plan_output.txt

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './terraform/environments/${{ github.event.inputs.environment || 'dev' }}/plan_output.txt';
            const plan = fs.readFileSync(path, 'utf8');
            
            const comment = `
            ## Terraform Plan - ${{ github.event.inputs.environment || 'dev' }} Environment
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`hcl
            ${plan}
            \`\`\`
            
            </details>
            
            **Plan Status**: ${{ steps.plan.outputs.plan_exitcode == '2' && 'Changes Detected' || 'No Changes' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Separate apply job for push events (with validation dependency)
  terraform-apply-push:
    name: Terraform Apply (Auto)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [terraform-validate]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform apply -auto-approve

      - name: Get Outputs
        id: outputs
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn 2>/dev/null || echo "")
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT

      - name: Test Deployment
        if: steps.outputs.outputs.api_url != ''
        run: |
          echo "Testing API Gateway endpoint..."
          curl -f "${{ steps.outputs.outputs.api_url }}" || exit 1
          echo "Deployment test successful!"

    outputs:
      api_url: ${{ steps.outputs.outputs.api_url }}
      lambda_arn: ${{ steps.outputs.outputs.lambda_arn }}

  # Separate apply job for manual workflow dispatch (no dependencies)
  terraform-apply-manual:
    name: Terraform Apply (Manual)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.action == 'apply'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform apply -auto-approve

      - name: Get Outputs
        id: outputs
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: |
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn 2>/dev/null || echo "")
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT

      - name: Test Deployment
        if: steps.outputs.outputs.api_url != ''
        run: |
          echo "Testing API Gateway endpoint..."
          curl -f "${{ steps.outputs.outputs.api_url }}" || exit 1
          echo "Deployment test successful!"

    outputs:
      api_url: ${{ steps.outputs.outputs.api_url }}
      lambda_arn: ${{ steps.outputs.outputs.lambda_arn }}

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.action == 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        run: terraform destroy -auto-approve